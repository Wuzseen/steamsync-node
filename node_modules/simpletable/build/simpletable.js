(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.SimpleTable = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

//import classNames from 'classnames';
//import SidebarMixin from 'global/jsx/sidebar_component';

//import Header from 'common/header';
//import Sidebar from 'common/sidebar';
//import Footer from 'common/footer';

//  <SimpleTable url pollInterval/>
//      <SimpleTableBody/>
//          <ButtonAdd/>
//          <AddFormModal/>
//          <SimpleTableHead/>
//          <SimpleTableRow/>
//              <ButtonDelete/>

var ButtonAdd = React.createClass({
    displayName: 'ButtonAdd',

    onClick: function onClick() {
        this.props.onClick();
    },
    onTouchEnd: function onTouchEnd() {
        this.props.onTouchEnd();
    },
    render: function render() {
        return React.createElement(
            Button,
            {
                bsStyle: 'info',
                onClick: this.onClick,
                onTouchEnd: this.onTouchEnd
            },
            'Add New Entry'
        );
    }
});

var SimpleTableBody = React.createClass({
    displayName: 'SimpleTableBody',

    loadFromServer: function loadFromServer(page) {
        var urloptions = '&page=' + page;
        if (this.props.urloptions) {
            urloptions = urloptions + '&' + this.props.urloptions;
        }
        $.ajax({
            url: this.props.url + '?method=get' + urloptions,
            dataType: 'json',
            cache: false,
            success: function (data) {
                this.setState({ data: data });
            }.bind(this),
            error: function (xhr, status, err) {
                if (err.toString() == "Unauthorized") {
                    this.onUnauthorized(false);
                }
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    onUpdate: function onUpdate(val) {
        var newdata = this.state.data;
        delete newdata.values[val.id];
        this.setState({
            data: newdata
        });
    },
    getInitialState: function getInitialState() {
        return { data: { "columns": [], "values": [], "authorized": true, "totals": [] } };
    },
    componentDidMount: function componentDidMount() {
        this.loadFromServer(0);
        this.refreshInterval = setInterval(this.loadFromServer, this.props.pollInterval);
    },
    componentWillUnmount: function componentWillUnmount() {
        clearInterval(this.refreshInterval);
    },
    onFormSubmit: function onFormSubmit(val) {
        var newdata = this.state.data;
        newdata.values.push(val.data);
        this.setState({
            data: newdata
        });
    },
    onUnauthorized: function onUnauthorized(val) {
        window.location = "login";
    },
    handlePaginatorClick: function handlePaginatorClick(page) {
        this.loadFromServer(page);
    },
    getLargeModal: function getLargeModal() {
        return React.createElement(AddFormModal, { columns: this.state.data.columns, onFormSubmit: this.onFormSubmit, url: this.props.url });
    },

    render: function render() {

        var url = this.props.url;
        var urloptions = this.props.urloptions;

        var idcol = null;
        for (var key in this.state.data.columns) {
            var row = this.state.data.columns[key];
            if (row.type == 'primary') {
                idcol = row.name;
            }
        };
        var buttonAdd = '';
        if (this.props.addButton == "true") {
            buttonAdd = React.createElement(ButtonAdd, { onClick: ModalManager.create.bind(this, this.getLargeModal()), onTouchEnd: ModalManager.create.bind(this, this.getLargeModal()) });
        };

        return React.createElement(
            'div',
            null,
            buttonAdd,
            React.createElement(
                Table,
                { id: this.props.tableid, className: 'display', cellSpacing: '0', width: '100%' },
                React.createElement(SimpleTableHead, { columns: this.state.data.columns }),
                React.createElement(
                    'tbody',
                    null,
                    this.state.data.values.map(function (object, i) {
                        return React.createElement(SimpleTableRow, {
                            key: i,
                            row: object,
                            id: i,
                            data: this.state.data,
                            idcol: idcol,
                            url: this.props.url,
                            urloptions: this.props.urloptions,
                            onUpdate: this.onUpdate });
                    }, this)
                )
            ),
            React.createElement(Paginator, { totals: this.state.data.totals, onClick: this.handlePaginatorClick })
        );
    }
});

var SimpleTableHead = React.createClass({
    displayName: 'SimpleTableHead',

    render: function render() {
        return React.createElement(
            'thead',
            null,
            React.createElement(
                'tr',
                null,
                this.props.columns.map(function (cols, i) {

                    if (cols.hidden == true) {
                        return;
                    }

                    return React.createElement(
                        'th',
                        { key: i },
                        cols.label
                    );
                })
            )
        );
    }
});

var SimpleTableRow = React.createClass({
    displayName: 'SimpleTableRow',

    renderEditable: function renderEditable() {
        $('.xeditable').editable({
            mode: 'popup',
            type: 'text',
            url: this.props.url + '?method=update',
            success: this.editSuccess
        });
        $('.xeditable_boolean').editable({
            mode: 'popup',
            type: 'text',
            url: this.props.url + '?method=update',
            source: [{ value: 1, text: 'Enabled' }, { value: 0, text: 'Disabled' }],
            success: this.editSuccess
        });
        $('.xeditable_select').editable({
            mode: 'popup',
            type: 'text',
            url: this.props.url + '?method=update',
            source: this.selectSrc(this.current_col),
            success: this.editSuccess
        });
    },
    componentDidMount: function componentDidMount() {
        this.renderEditable();
    },
    onUpdate: function onUpdate(val) {
        this.props.onUpdate(val);
    },
    editSuccess: function editSuccess(response, newValue) {
        if (response.result != 0) {
            if (response.msg == null) {
                return "Undefined error";
            } else {
                return response.msg;
            }
        }
    },
    selectSrc: function selectSrc(val) {
        if (typeof val == 'undefined') {
            return false;
        }
        var src = [];
        for (var ind in val.values) {
            src.push({
                value: ind,
                text: val.values[ind]
            });
        };
        return src;
    },
    render: function render() {
        //       var tableRow = this.props.row;
        //       var colTypes = this.props.coltypes;
        //       var colEditables = this.props.editables;
        //       var colNames = this.props.colnames;
        //       var rowArray = $.map(tableRow, function(value, index){
        //           return [value];
        //       });
        var pk = this.props.row[this.props.idcol];

        return React.createElement(
            'tr',
            { key: pk },
            this.props.data.columns.map(function (col, index) {
                var name = col.name;
                if (col.hidden == true) {
                    return;
                }
                if (col.type == 'subtable') {
                    var qs = this.props.idcol + '=' + pk;
                    return React.createElement(
                        'td',
                        { key: index },
                        React.createElement(ButtonSubtable, { onUpdate: this.onUpdate, pk: pk, url: this.props.url, id: this.props.id, dataurl: col.url, qs: qs, title: col.label })
                    );
                } else if (col.type == 'button_delete') {
                    return React.createElement(
                        'td',
                        { key: index },
                        React.createElement(ButtonDelete, { onUpdate: this.onUpdate, pk: pk, url: this.props.url, id: this.props.id })
                    );
                } else {
                    if (col.editable) {
                        if (col.type == 'boolean') {
                            return React.createElement(
                                'td',
                                { key: index },
                                React.createElement(
                                    'a',
                                    { href: '#', key: index,
                                        className: 'xeditable_boolean',
                                        'data-type': 'select',
                                        'data-title': col.label,
                                        'data-pk': pk,
                                        'data-name': col.name,
                                        'data-value': this.props.row[col.name]
                                    },
                                    this.props.row[col.name] == 1 ? 'Enabled' : 'Disabled'
                                )
                            );
                        } else if (col.type == 'select') {
                            this.current_col = col;
                            return React.createElement(
                                'td',
                                { key: index, className: index === 0 ? 'text-left' : '' },
                                React.createElement(
                                    'a',
                                    { href: '#', key: index,
                                        className: 'xeditable_select',
                                        'data-type': 'select',
                                        'data-title': col.label,
                                        'data-pk': pk,
                                        'data-name': col.name,
                                        'data-value': this.props.row[col.name]
                                    },
                                    col.values[this.props.row[col.name]]
                                )
                            );
                        } else {
                            // string
                            return React.createElement(
                                'td',
                                { key: index, className: index === 0 ? 'text-left' : '' },
                                React.createElement(
                                    'a',
                                    { href: '#', key: index,
                                        className: 'xeditable',
                                        'data-type': 'text',
                                        'data-title': col.label,
                                        'data-pk': pk,
                                        'data-name': col.name
                                    },
                                    this.props.row[col.name]
                                )
                            );
                        }
                    }
                    return React.createElement(
                        'td',
                        { key: index },
                        this.props.row[col.name]
                    );
                }
            }, this)
        );
    }

});

var SubtableModal = React.createClass({
    displayName: 'SubtableModal',
    render: function render() {
        return React.createElement(
            Modal,
            null,
            React.createElement(
                ModalHeader,
                null,
                React.createElement(Button, { onClick: ModalManager.remove, onTouchEnd: ModalManager.remove, close: true }),
                React.createElement(
                    'h4',
                    { className: 'modal-title' },
                    this.props.title
                )
            ),
            React.createElement(
                ModalBody,
                null,
                React.createElement(SimpleTable, { url: this.props.dataurl, urloptions: this.props.qs })
            ),
            React.createElement(ModalFooter, null)
        );
    }
});

var ButtonSubtable = React.createClass({
    displayName: 'ButtonSubtable',
    getSubtableModal: function getSubtableModal() {
        return React.createElement(SubtableModal, { dataurl: this.props.dataurl, qs: this.props.qs, title: this.props.title });
    },
    render: function render() {
        return React.createElement(
            Button,
            { bsStyle: 'small outlined default', onClick: ModalManager.create.bind(this, this.getSubtableModal()), onTouchEnd: ModalManager.create.bind(this, this.getSubtableModal()) },
            'Show'
        );
    }
});

var ButtonDelete = React.createClass({
    displayName: 'ButtonDelete',

    handleDelete: function handleDelete() {
        if (confirm("Are you sure?")) {
            $.ajax({
                url: this.props.url + '?method=remove',
                method: 'POST',
                data: { "pk": this.props.pk, "id": this.props.id },
                dataType: 'json',
                cache: false,
                success: function (data) {
                    this.props.onUpdate(data);
                }.bind(this),
                error: function (xhr, status, err) {
                    console.error(this.props.url, status, err.toString());
                }.bind(this)
            });
        }
    },
    render: function render() {
        return React.createElement(
            Button,
            { bsStyle: 'danger', onClick: this.handleDelete },
            'Delete'
        );
    }
});

var AddFormModal = React.createClass({
    displayName: 'AddFormModal',

    getInitialState: function getInitialState() {
        var startstate = [];
        this.props.columns.map(function (cols, i) {
            if ("default" in cols) {
                startstate[cols.name] = cols.default;
            }
        });
        return { fields: startstate, error_fields: [], error_message: null };
    },

    onCancel: function onCancel() {
        var newstate = [];
        this.props.columns.map(function (cols, i) {
            if ("default" in cols) {
                newstate[cols.name] = cols.default;
            }
        });
        this.setState({ fields: newstate });
        ModalManager.remove();
    },
    changeField: function changeField(name, e) {
        var change = this.state.fields;
        change[name] = e.target.value;
        this.setState({ fields: change });
    },
    handleSubmit: function handleSubmit(e) {
        e.preventDefault();
        var data = {};
        for (var i in this.state.fields) {
            data[i] = this.state.fields[i];
        }
        $.ajax({
            url: this.props.url + '?method=create',
            dataType: 'json',
            method: 'POST',
            data: data,
            success: function (data) {
                this.handleServerResponse(data);
            }.bind(this),
            error: function (xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    handleServerResponse: function handleServerResponse(data) {
        if (data.result == 0) {
            // update state and close
            this.props.onFormSubmit(data);
            ModalManager.remove();
        } else {
            this.setState({
                error_fields: data.fields,
                error_message: data.msg
            });
        }
    },
    render: function render() {
        var alertMessage = '';
        if (this.state.error_message) {
            alertMessage = React.createElement(
                Alert,
                { danger: true, collapseBottom: true },
                this.state.error_message
            );
        }
        return React.createElement(
            Modal,
            { lg: true },
            React.createElement(
                ModalHeader,
                null,
                React.createElement(Button, { onClick: ModalManager.remove, onTouchEnd: ModalManager.remove, close: true }),
                React.createElement(
                    'h4',
                    { className: 'modal-title' },
                    'Add New Entry'
                ),
                alertMessage
            ),
            React.createElement(
                ModalBody,
                null,
                React.createElement(
                    Form,
                    { horizontal: true },
                    this.props.columns.map(function (cols, i) {
                        var labelClass = "";
                        if (typeof this.state.error_fields !== 'undefined' && this.state.error_fields.length > 0) {
                            if (this.state.error_fields.indexOf(cols.name) > -1) {
                                var labelClass = "has-error";
                            }
                        }

                        if (cols.type == 'select') {
                            var rows = [];
                            for (var i in cols.values) {
                                rows.push(React.createElement(
                                    'option',
                                    { value: i, key: i },
                                    cols.values[i]
                                ));
                            }
                            return React.createElement(
                                FormGroup,
                                { key: i, className: labelClass },
                                React.createElement(
                                    Label,
                                    { control: true, sm: 3, htmlFor: 'blockhelp' },
                                    cols.label
                                ),
                                React.createElement(
                                    Col,
                                    { sm: 9 },
                                    React.createElement(
                                        Select,
                                        {
                                            value: this.props.value,
                                            defaultValue: this.props.default,
                                            onChange: this.changeField.bind(this, cols.name) },
                                        rows
                                    )
                                )
                            );
                        } else if (cols.type == "text") {
                            return React.createElement(
                                FormGroup,
                                { key: i, className: labelClass },
                                React.createElement(
                                    Label,
                                    { control: true, sm: 3, htmlFor: 'blockhelp' },
                                    cols.label
                                ),
                                React.createElement(
                                    Col,
                                    { sm: 9 },
                                    React.createElement(Input, {
                                        type: 'text',
                                        id: 'blockhelp',
                                        placeholder: cols.label,
                                        defaultValue: cols.default,
                                        value: this.state.fields[cols.name],
                                        onChange: this.changeField.bind(this, cols.name) })
                                )
                            );
                        } else if (cols.type == "boolean") {
                            return React.createElement(
                                FormGroup,
                                { key: i, className: labelClass },
                                React.createElement(
                                    Label,
                                    { control: true, sm: 3, htmlFor: 'blockhelp' },
                                    cols.label
                                ),
                                React.createElement(
                                    Col,
                                    { sm: 9 },
                                    React.createElement(Checkbox, {
                                        value: '1',
                                        name: 'horizontal-checkbox-options',
                                        onChange: this.changeField.bind(this, cols.name) })
                                )
                            );
                        }
                    }, this)
                )
            ),
            React.createElement(
                ModalFooter,
                null,
                React.createElement(
                    Button,
                    { outlined: true, bsStyle: 'danger', onClick: this.onCancel },
                    'cancel'
                ),
                ' ',
                React.createElement(
                    Button,
                    { outlined: true, bsStyle: 'lightblue', onClick: this.handleSubmit, type: 'submit' },
                    'submit'
                )
            )
        );
    }
});

var Paginator = React.createClass({
    displayName: 'Paginator',

    onClick: function onClick(i, e) {
        e.preventDefault();
        this.props.onClick(i);
    },
    render: function render() {
        if (this.props.totals == undefined) {
            return React.createElement('div', null);
        }
        var maxrows = this.props.totals.maxrows;
        var numpages = Math.ceil(this.props.totals.count / maxrows);
        var first = this.props.totals.page * maxrows + 1;
        var last = Math.min(first + maxrows - 1, this.props.totals.count);
        var pages = [];

        if (this.props.totals.page == 0) {
            pages.push(React.createElement(Page, { key: '0-0', begin: true, disabled: true, onClick: this.onClick.bind(this, 0) }));
        } else {
            pages.push(React.createElement(Page, { key: '0-0', begin: true, onClick: this.onClick.bind(this, 0) }));
        }

        for (var i = 0; i < numpages; i++) {
            if (this.props.totals.page == i) {
                pages.push(React.createElement(
                    Page,
                    { key: i, active: true, onClick: this.onClick.bind(this, i) },
                    i + 1
                ));
            } else {
                pages.push(React.createElement(
                    Page,
                    { key: i, onClick: this.onClick.bind(this, i) },
                    i + 1
                ));
            }
        }
        if (this.props.totals.page == numpages - 1) {
            pages.push(React.createElement(Page, { key: numpages, end: true, disabled: true, onClick: this.onClick.bind(this, numpages - 1) }));
        } else {
            pages.push(React.createElement(Page, { key: numpages, end: true, onClick: this.onClick.bind(this, numpages - 1) }));
        }

        return React.createElement(
            'div',
            null,
            React.createElement(
                'div',
                null,
                'Showing ',
                first,
                ' to ',
                last,
                ' of ',
                this.props.totals.count,
                ' entries'
            ),
            React.createElement(
                Pagination,
                null,
                pages
            )
        );
    }
});

var SimpleTable = function (_React$Component) {
    _inherits(SimpleTable, _React$Component);

    function SimpleTable() {
        _classCallCheck(this, SimpleTable);

        return _possibleConstructorReturn(this, Object.getPrototypeOf(SimpleTable).apply(this, arguments));
    }

    _createClass(SimpleTable, [{
        key: 'render',
        value: function render() {
            return React.createElement(SimpleTableBody, {
                tableid: this.props.tableid,
                url: this.props.url,
                pollInterval: this.props.pollInterval,
                urloptions: this.props.urloptions,
                addButton: this.props.addButton
            });
        }
    }]);

    return SimpleTable;
}(React.Component);

exports.default = SimpleTable;
module.exports = exports['default'];

},{}]},{},[1])(1)
});