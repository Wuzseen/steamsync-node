//import classNames from 'classnames';
//import SidebarMixin from 'global/jsx/sidebar_component';

//import Header from 'common/header';
//import Sidebar from 'common/sidebar';
//import Footer from 'common/footer';

//  <SimpleTable url pollInterval/>
//      <SimpleTableBody/>
//          <ButtonAdd/>
//          <AddFormModal/>
//          <SimpleTableHead/>
//          <SimpleTableRow/>
//              <ButtonDelete/>


var ButtonAdd = React.createClass({
    onClick: function() {
        this.props.onClick();
    },
    onTouchEnd: function() {
        this.props.onTouchEnd();
    },
    render() {
        return <Button
            bsStyle='info'
            onClick={this.onClick}
            onTouchEnd={this.onTouchEnd}
        >Add New Entry</Button>
    }
})

var SimpleTableBody = React.createClass({
    loadFromServer: function(page) {
        var urloptions = '&page=' + page ;
        if (this.props.urloptions) {
            urloptions = urloptions + '&' + this.props.urloptions;
        }
        $.ajax({
            url: this.props.url + '?method=get' + urloptions,
            dataType: 'json',
            cache: false,
            success: function(data) {
                this.setState({data: data});
            }.bind(this),
            error: function(xhr, status, err) {
                if (err.toString() == "Unauthorized") {
                    this.onUnauthorized(false);
                }
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    onUpdate: function(val){
        var newdata = this.state.data;
        delete newdata.values[val.id];
        this.setState({
            data: newdata
           });
    },
    getInitialState: function() {
        return {data: {"columns":[], "values":[], "authorized": true, "totals": []}};
    },
    componentDidMount: function() {
        this.loadFromServer(0);
        this.refreshInterval = setInterval(this.loadFromServer, this.props.pollInterval);
    },
    componentWillUnmount: function() {
        clearInterval(this.refreshInterval);
    },
    onFormSubmit: function(val) {
        var newdata = this.state.data;
        newdata.values.push(val.data);
        this.setState({
            data: newdata
        });
    },
    onUnauthorized: function(val){
        window.location = "login";
    },
    handlePaginatorClick: function(page) {
        this.loadFromServer(page);
    },
    getLargeModal() {
        return (
            <AddFormModal columns={this.state.data.columns} onFormSubmit={this.onFormSubmit} url={this.props.url}/>
        );
    },
    render: function() {

        var url = this.props.url;
        var urloptions = this.props.urloptions;

        var idcol = null;
        for (var key in this.state.data.columns) {
            var row = this.state.data.columns[key];
            if (row.type == 'primary') {
                idcol = row.name;
            }
        };
        var buttonAdd = '';
        if (this.props.addButton == "true") {
            buttonAdd = <ButtonAdd onClick={ModalManager.create.bind(this, this.getLargeModal())} onTouchEnd={ModalManager.create.bind(this, this.getLargeModal())}/>;
        };

        return (
            <div>
                {buttonAdd}
                <Table id={this.props.tableid} className='display' cellSpacing='0' width='100%'>
                    <SimpleTableHead columns={this.state.data.columns}/>
                    <tbody>
                    {
                        this.state.data.values.map(function (object, i) {
                            return (
                                <SimpleTableRow
                                    key={i}
                                    row={object}
                                    id={i}
                                    data={this.state.data}
                                    idcol={idcol}
                                    url={this.props.url}
                                    urloptions={this.props.urloptions}
                                    onUpdate={this.onUpdate}/>
                            )
                        }, this)
                    }
                    </tbody>
                </Table>
                <Paginator totals={this.state.data.totals} onClick={this.handlePaginatorClick}  />
            </div>
        );
    }
});

var SimpleTableHead = React.createClass({
    render: function() {
        return (
            <thead>
                <tr>
                    {
                        this.props.columns.map(function(cols, i) {

                            if (cols.hidden == true) {
                                return
                            }

                            return <th key={i}>{cols.label}</th>
                        })
                    }
                </tr>
            </thead>
        );
    }
});

var SimpleTableRow = React.createClass({
    renderEditable: function() {
        $('.xeditable').editable({
            mode: 'popup',
            type: 'text',
            url: this.props.url + '?method=update',
            success: this.editSuccess
        });
        $('.xeditable_boolean').editable({
            mode: 'popup',
            type: 'text',
            url: this.props.url + '?method=update',
            source: [
                {value: 1, text: 'Enabled'},
                {value: 0, text: 'Disabled'}
            ],
            success: this.editSuccess
        });
        $('.xeditable_select').editable({
            mode: 'popup',
            type: 'text',
            url: this.props.url + '?method=update',
            source: this.selectSrc(this.current_col),
            success: this.editSuccess
        });
    },
    componentDidMount: function() {
        this.renderEditable();
    },
    onUpdate: function(val){
        this.props.onUpdate(val);
    },
    editSuccess: function(response, newValue) {
        if(response.result != 0)
        {
            if (response.msg == null) {
                return "Undefined error";
            } else {
                return response.msg;
            }
        }
    },
    selectSrc: function(val) {
        if (typeof val == 'undefined') {
            return false;
        }
        var src = [];
        for (var ind in val.values) {
            src.push({
                value: ind,
                text: val.values[ind]
            });
        };
        return src;
    },
    render: function() {
 //       var tableRow = this.props.row;
 //       var colTypes = this.props.coltypes;
 //       var colEditables = this.props.editables;
 //       var colNames = this.props.colnames;
 //       var rowArray = $.map(tableRow, function(value, index){
 //           return [value];
 //       });
        var pk = this.props.row[this.props.idcol];

        return (
            <tr key={pk}>
                {this.props.data.columns.map(function(col, index) {
                    var name = col.name;
                    if (col.hidden == true) {
                        return
                    }
                    if (col.type == 'subtable') {
                        var qs = this.props.idcol + '=' + pk;
                        return (
                            <td key={index}>
                                <ButtonSubtable onUpdate={this.onUpdate} pk={pk} url={this.props.url} id={this.props.id} dataurl={col.url} qs={qs} title={col.label}/>
                            </td>)
                    } else if (col.type == 'button_delete') {
                        return <td key={index}><ButtonDelete onUpdate={this.onUpdate} pk={pk} url={this.props.url} id={this.props.id}/></td>
                    } else {
                        if (col.editable){
                            if(col.type == 'boolean') {
                                return <td key={index}>
                                    <a href="#" key={index}
                                       className="xeditable_boolean"
                                       data-type="select"
                                       data-title={col.label}
                                       data-pk={pk}
                                       data-name={col.name}
                                       data-value={this.props.row[col.name]}
                                    >{(this.props.row[col.name] == 1) ? 'Enabled' : 'Disabled'}</a></td>
                            } else if (col.type == 'select') {
                                this.current_col = col;
                                return <td key={index} className={(index === 0) ? 'text-left' : ''}>
                                    <a href='#' key={index}
                                       className='xeditable_select'
                                       data-type='select'
                                       data-title={col.label}
                                       data-pk={pk}
                                       data-name={col.name}
                                       data-value={this.props.row[col.name]}
                                    >{col.values[this.props.row[col.name]]}</a>
                                </td>
                            } else {  // string
                                return <td key={index} className={(index === 0) ? 'text-left' : ''}>
                                    <a href='#' key={index}
                                       className='xeditable'
                                       data-type='text'
                                       data-title={col.label}
                                       data-pk={pk}
                                       data-name={col.name}
                                    >{this.props.row[col.name]}</a>
                                </td>
                            }
                        }
                        return <td key={index}>{this.props.row[col.name]}</td>
                    }
                }, this)}
            </tr>
        );
    }

})


var SubtableModal = React.createClass ({
    render() {
        return (
            <Modal>
                <ModalHeader>
                    <Button onClick={ModalManager.remove} onTouchEnd={ModalManager.remove} close />
                    <h4 className='modal-title'>{this.props.title}</h4>
                </ModalHeader>
                <ModalBody>
                    <SimpleTable url={this.props.dataurl} urloptions={this.props.qs}/>
                </ModalBody>
                <ModalFooter>
                </ModalFooter>
            </Modal>
        )
    }
})

var ButtonSubtable = React.createClass({
    getSubtableModal() {
        return (
            <SubtableModal dataurl={this.props.dataurl} qs={this.props.qs} title={this.props.title}/>
        );
    },
    render() {
        return  <Button bsStyle='small outlined default' onClick={ModalManager.create.bind(this, this.getSubtableModal())} onTouchEnd={ModalManager.create.bind(this, this.getSubtableModal())} >Show</Button>
    }
})

var ButtonDelete = React.createClass({
    handleDelete: function() {
        if(confirm("Are you sure?")) {
            $.ajax({
                url: this.props.url + '?method=remove',
                method: 'POST',
                data: {"pk": this.props.pk, "id": this.props.id},
                dataType: 'json',
                cache: false,
                success: function (data) {
                    this.props.onUpdate(data);
                }.bind(this),
                error: function (xhr, status, err) {
                    console.error(this.props.url, status, err.toString());
                }.bind(this)
            });
        }
    },
    render() {
        return <Button bsStyle='danger' onClick={this.handleDelete}>Delete</Button>
    }
})

var AddFormModal = React.createClass({
    getInitialState: function() {
        var startstate = [];
        this.props.columns.map(function(cols, i) {
            if("default" in cols) {
                startstate[cols.name] = cols.default;
            }
        })
        return { fields: startstate, error_fields: [], error_message: null};
    },

    onCancel: function() {
        var newstate = [];
        this.props.columns.map(function(cols, i) {
            if("default" in cols) {
                newstate[cols.name] = cols.default;
            }
        })
        this.setState({fields: newstate});
        ModalManager.remove();
    },
    changeField: function(name, e) {
        var change = this.state.fields;
        change[name] = e.target.value;
        this.setState({fields: change});
    },
    handleSubmit: function(e) {
        e.preventDefault();
        var data = {};
        for (var i in this.state.fields) {
            data[i] = this.state.fields[i];
        }
        $.ajax({
            url: this.props.url + '?method=create',
            dataType: 'json',
            method: 'POST',
            data: data,
            success: function(data) {
                this.handleServerResponse(data);
            }.bind(this),
            error: function(xhr, status, err) {
                console.error(this.props.url, status, err.toString());
            }.bind(this)
        });
    },
    handleServerResponse: function(data) {
        if (data.result == 0) {
            // update state and close
           this.props.onFormSubmit(data);
            ModalManager.remove();
        } else {
            this.setState({
                error_fields: data.fields,
                error_message: data.msg
            });
        }
    },
    render() {
        var alertMessage = '';
        if (this.state.error_message) {
            alertMessage = <Alert danger collapseBottom>{this.state.error_message}</Alert>
        }
        return (
            <Modal lg>
                <ModalHeader>
                    <Button onClick={ModalManager.remove} onTouchEnd={ModalManager.remove} close />
                    <h4 className='modal-title'>Add New Entry</h4>
                    {alertMessage}
                </ModalHeader>
                <ModalBody>
                    <Form horizontal >
                        {
                            this.props.columns.map(function(cols, i) {
                                var labelClass = "";
                                if (typeof this.state.error_fields !== 'undefined' && this.state.error_fields.length > 0) {
                                    if ( this.state.error_fields.indexOf(cols.name) > -1 ) {
                                        var labelClass = "has-error";
                                    }
                                }

                                if (cols.type=='select')
                                {
                                    var rows = [];
                                    for (var i in cols.values) {
                                        rows.push(<option value={i} key={i}>{cols.values[i]}</option>);
                                    }
                                    return (
                                        <FormGroup key={i} className={labelClass}>
                                            <Label control sm={3} htmlFor='blockhelp' >{cols.label}</Label>
                                            <Col sm={9}>
                                                <Select
                                                    value={this.props.value}
                                                    defaultValue={this.props.default}
                                                    onChange={this.changeField.bind(this, cols.name)}>{rows}</Select>
                                            </Col>
                                        </FormGroup> )
                                } else if( cols.type == "text" ) {
                                     return (
                                        <FormGroup key={i} className={labelClass}>
                                            <Label control sm={3} htmlFor='blockhelp' >{cols.label}</Label>
                                            <Col sm={9}>
                                                <Input
                                                    type='text'
                                                    id='blockhelp'
                                                    placeholder={cols.label}
                                                    defaultValue={cols.default}
                                                    value={this.state.fields[cols.name]}
                                                    onChange={this.changeField.bind(this, cols.name)}/>
                                            </Col>
                                        </FormGroup>
                                     )
                                } else if (cols.type == "boolean") {
                                      return (
                                          <FormGroup key={i} className={labelClass}>
                                                <Label control sm={3} htmlFor='blockhelp' >{cols.label}</Label>
                                                <Col sm={9}>
                                                    <Checkbox
                                                        value='1'
                                                        name='horizontal-checkbox-options'
                                                        onChange={this.changeField.bind(this, cols.name)}/>
                                                </Col>
                                          </FormGroup>
                                      )
                                }
                            }, this)
                        }
                    </Form>
                </ModalBody>
                <ModalFooter>
                    <Button outlined bsStyle='danger' onClick={this.onCancel}>cancel</Button>{' '}
                    <Button outlined bsStyle='lightblue' onClick={this.handleSubmit} type='submit' >submit</Button>
                </ModalFooter>
            </Modal>
        )
    }
})

var Paginator = React.createClass({
    onClick: function(i, e){
        e.preventDefault();
        this.props.onClick(i);
    },
    render() {
        if (this.props.totals == undefined) {
            return <div></div>;
        }
        var maxrows = this.props.totals.maxrows;
        var numpages = Math.ceil(this.props.totals.count / maxrows);
        var first = this.props.totals.page * maxrows + 1;
        var last = Math.min(first + maxrows  - 1, this.props.totals.count);
        var pages = [];

        if (this.props.totals.page == 0) {
            pages.push(<Page key='0-0' begin disabled onClick={this.onClick.bind(this,0)} />);
        } else {
            pages.push(<Page key='0-0' begin onClick={this.onClick.bind(this,0)}/>);
        }

        for (var i=0; i < numpages; i++) {
            if (this.props.totals.page == i) {
                pages.push(<Page key={i} active onClick={this.onClick.bind(this,i)}>{i+1}</Page>);
            } else {
                pages.push(<Page key={i} onClick={this.onClick.bind(this,i)}>{i+1}</Page>);
            }
        }
        if (this.props.totals.page == numpages-1) {
            pages.push(<Page key={numpages} end disabled onClick={this.onClick.bind(this,numpages-1)}/>);
        } else {
            pages.push(<Page key={numpages} end onClick={this.onClick.bind(this,numpages-1)}/>);
        }

        return (
            <div>
                <div>Showing {first} to {last} of {this.props.totals.count} entries</div>
                <Pagination>
                    {pages}
                </Pagination>
            </div>
        )
    }

})

export default class SimpleTable extends React.Component {
    render(){
        return (
            <SimpleTableBody
                tableid = {this.props.tableid}
                url={this.props.url}
                pollInterval={this.props.pollInterval}
                urloptions={this.props.urloptions}
                addButton={this.props.addButton}
            />
        );
    }
}